service: whatday

provider:
  name: aws
  runtime: java8
  region: ap-northeast-1
  environment:
    TWITTER4J_DEBUG: ${env:TWITTER4J_DEBUG}
    TWITTER4J_OAUTH_CONSUMERKEY: ${env:TWITTER4J_OAUTH_CONSUMERKEY}
    TWITTER4J_OAUTH_CONSUMERSECRET: ${env:TWITTER4J_OAUTH_CONSUMERSECRET}
    TWITTER4J_OAUTH_ACCESSTOKEN: ${env:TWITTER4J_OAUTH_ACCESSTOKEN}
    TWITTER4J_OAUTH_ACCESSTOKENSECRET: ${env:TWITTER4J_OAUTH_ACCESSTOKENSECRET}

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
package:
  artifact: target/hello-dev.jar

functions:
  default:
    handler: com.serverless.Handler
    events:
      - schedule: cron(0 23 * * ? *)
    environment:
      KEYWORD: Template:今日は何の日
      HEADER: ''
  disaster:
    handler: com.serverless.Handler
    events:
      - schedule: cron(0 3 * * ? *)
    environment:
      KEYWORD: Portal:災害/今日は何の日
      HEADER: 災害
  literature:
    handler: com.serverless.Handler
    events:
      - schedule: cron(0 7 * * ? *)
    environment:
      KEYWORD: Portal:文学/今日は何の日
      HEADER: 文学
  sports:
    handler: com.serverless.Handler
    events:
      - schedule: cron(0 11 * * ? *)
    environment:
      KEYWORD: Portal:スポーツ/今日は何の日
      HEADER: スポーツ

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
